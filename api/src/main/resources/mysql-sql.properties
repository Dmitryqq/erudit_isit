queries.GET_NEWS = SELECT n.*, nt.name as type_name, \
                    (SELECT name FROM news_images WHERE news_id = n.id ORDER BY is_main DESC LIMIT 1) image_name FROM news n  \
                    JOIN news_types nt ON nt.id = n.type_id \
                    ORDER BY n.create_date DESC LIMIT :limit OFFSET :offset
queries.GET_SINGLE_NEWS = SELECT n.*, nt.name as type_name, \
                    (SELECT GROUP_CONCAT(concat(name, '_', is_main) SEPARATOR ';') FROM news_images WHERE news_id = n.id ORDER BY is_main) images FROM news n  \
                    JOIN news_types nt ON nt.id = n.type_id \
                    WHERE n.url = :url
queries.GET_SINGLE_NEWS_BY_ID = SELECT n.*, nt.name as type_name, \
                    (SELECT GROUP_CONCAT(concat(name, '_', is_main) SEPARATOR ';') FROM news_images WHERE news_id = n.id ORDER BY is_main) images FROM news n  \
                    JOIN news_types nt ON nt.id = n.type_id \
                    WHERE n.id = :id
queries.GET_SINGLE_NEWS_UUID_BY_ID = SELECT n.* FROM news n WHERE n.id = :newsId
queries.GET_REVIEWS = SELECT * FROM reviews LIMIT :limit OFFSET :offset
queries.GET_SINGLE_REVIEW = SELECT * FROM reviews WHERE id = :id

queries.GET_INNER_NEWS = SELECT * FROM news_inner
queries.GET_EVENTS = SELECT * FROM events

queries.GET_ROLES = SELECT * FROM roles
queries.GET_NEWS_TYPES = SELECT * FROM news_types
queries.GET_SUBJECTS = SELECT * FROM subjects
queries.GET_GRADE_TYPES = SELECT * FROM grade_types
queries.GET_CLASSES = SELECT * FROM classes
queries.GET_TRIMESTERS = SELECT * FROM trimesters
queries.GET_SCHEDULE_ITEM_TYPES = SELECT * FROM schedule_item_types
queries.GET_SCHEDULE_ITEM_TEMPLATE = SELECT * FROM schedule_item_template
queries.GET_SCHEDULE = SELECT s.*, st.`code` status FROM schedules s JOIN schedule_statuses st ON s.status_id = st.id WHERE s.id = :scheduleId
queries.GET_SUBJECT_TEACHERS_FOR_CLASS = SELECT s.id s_id, s.name s_name, u.id u_id, u.name u_name, u.surname u_surname, u.patronymic u_patronymic \
                                    FROM user_teacher_subject_and_class tsc \
                                    JOIN users u ON u.id = tsc.user_id \
                                    JOIN subjects s ON s.id = tsc.subject_id \
                                    WHERE tsc.class_id = :classId \
                                    UNION SELECT s.id s_id, s.name s_name, NULL, NULL, NULL, NULL FROM subjects s WHERE s.teacher_required = 0
queries.GET_USERS = SELECT u.id, u.username, u.name, u.surname, u.patronymic, r.id AS r_id, r.code AS r_code, r.name AS r_name, u.locked, u.create_date FROM users u \
                    JOIN roles r ON r.id = u.role_id
queries.GET_STUDENTS = SELECT u.id, u.username, u.name, u.surname, u.patronymic, u.locked FROM users u \
                    JOIN user_student us ON us.user_id = u.id \
                    WHERE u.role_id = 4 AND us.class_id = :classId
queries.GET_USER_DETAILS = SELECT u.id, u.username, u.name, u.surname, u.patronymic, r.id AS r_id, r.code AS r_code, r.name AS r_name,  \
                        u.locked, u.birth_date, u.create_date,  \
                        (SELECT class_id FROM user_student WHERE user_id = u.id) student_class_id, \
                        (SELECT GROUP_CONCAT(class_id SEPARATOR ';') FROM user_teacher_classes WHERE user_id = u.id) teacher_classes_ids, \
                        (SELECT GROUP_CONCAT(subject_id SEPARATOR ';') FROM user_teacher_subjects WHERE user_id = u.id) teacher_subjects_ids, \
                        (SELECT GROUP_CONCAT(concat(subject_id, '_', class_id) SEPARATOR ';') FROM user_teacher_subject_and_class WHERE user_id = u.id) teacher_subject_classes_ids \
                        FROM users u  \
                        JOIN roles r ON r.id = u.role_id \
                        WHERE u.id = :id

queries.GET_USER_BY_USERNAME_PASS = SELECT u.id, u.username, u.name, u.surname, u.patronymic, r.code AS role_code, u.password, u.locked, u.pwd_change_required FROM users u \
                                    JOIN roles r ON r.id = u.role_id \
                                    WHERE u.username = :username
queries.GET_CURRENT_WEEK_SCHEDULE_BY_ID = SELECT si.*, sit.CODE as status FROM schedule_items si \
                                        JOIN schedule_item_statuses sit ON sit.id = si.status_id  \
                                        WHERE WEEK(CURDATE()) = WEEK(si.date) AND si.schedule_id = :id ORDER BY si.date, si.start_time
queries.GET_FIRST_WEEK_SCHEDULE_BY_ID = SELECT si.*, sit.CODE as status FROM schedule_items si \
                                        JOIN schedule_item_statuses sit ON sit.id = si.status_id  \
                                        WHERE (SELECT WEEK(MIN(si.date)) FROM schedule_items si1 WHERE si1.schedule_id = si.schedule_id) = WEEK(si.date) AND si.schedule_id = :id ORDER BY si.date, si.start_time
queries.GET_SCHEDULE_ITEMS_BY_SCHEDULE_ID = SELECT si.*, sit.CODE as status FROM schedule_items si \
                                        JOIN schedule_item_statuses sit ON sit.id = si.status_id  \
                                        WHERE si.date BETWEEN :fromDate and :toDate AND schedule_id = :id ORDER BY si.date, si.start_time
queries.GET_INDIVIDUAL_SCHEDULE_ITEMS_BY_IDS = WITH \
                                        class AS (SELECT si.*, sit.CODE as STATUS, 0 AS individual FROM schedule_items si \
                                        JOIN schedule_item_statuses sit ON sit.id = si.status_id \
                                        WHERE si.date BETWEEN :fromDate and :toDate AND si.schedule_id = :classScheduleId), \
                                        individual AS (SELECT si.*, sit.CODE as STATUS, 1 AS individual FROM schedule_items si \
                                        JOIN schedule_item_statuses sit ON sit.id = si.status_id \
                                        WHERE si.date BETWEEN :fromDate and :toDate AND schedule_id = :individualScheduleId) \
                                        SELECT * FROM individual \
                                        UNION \
                                        SELECT class.* FROM class WHERE class.date NOT IN (SELECT `date` FROM individual)  \
                                        OR (class.date IN (SELECT `date` FROM individual) AND class.start_time NOT IN (SELECT start_time FROM individual WHERE `date` = class.`date`)) \
                                        ORDER BY date, start_time

queries.GET_INDIVIDUAL_SCHEDULE_ITEMS_BY_IND_ID = WITH \
                                        class AS (SELECT si.*, sit.CODE as STATUS, 0 AS individual FROM schedule_items si \
                                        JOIN schedule_item_statuses sit ON sit.id = si.status_id \
                                        JOIN schedules s ON s.id = si.schedule_id \
                                        WHERE si.type_id = 1 AND si.date = :date AND s.class_id = (SELECT us.class_id FROM schedules s JOIN user_student us ON s.student_id = us.user_id AND s.id = :individualScheduleId)), \
                                        individual AS (SELECT si.*, sit.CODE as STATUS, 1 AS individual FROM schedule_items si \
                                        JOIN schedule_item_statuses sit ON sit.id = si.status_id \
                                        WHERE si.type_id = 1 AND si.date = :date AND schedule_id = :individualScheduleId) \
                                        SELECT * FROM individual \
                                        UNION \
                                        SELECT class.* FROM class WHERE class.date NOT IN (SELECT `date` FROM individual)  \
                                        OR (class.date IN (SELECT `date` FROM individual) AND class.start_time NOT IN (SELECT start_time FROM individual WHERE `date` = class.`date`)) \
                                        ORDER BY date, start_time

queries.GET_SCHEDULE_BY_CLASS_TRIMESTER = SELECT s.*, st.`code` status FROM schedules s JOIN schedule_statuses st ON s.status_id = st.id WHERE s.class_id = :classId and s.trimester_id = :trimesterId
queries.GET_CLASS_SCHEDULE_BY_STUDENT_TRIMESTER = SELECT s.*, st.`code` status FROM schedules s JOIN schedule_statuses st ON s.status_id = st.id WHERE s.class_id = (SELECT class_id FROM user_student WHERE user_id = :studentId) and s.trimester_id = :trimesterId
queries.GET_SCHEDULE_BY_STUDENT_TRIMESTER = SELECT s.*, st.`code` status FROM schedules s JOIN schedule_statuses st ON s.status_id = st.id WHERE s.student_id = :studentId and s.trimester_id = :trimesterId
queries.GET_SCHEDULE_ITEMS_STUDENT_DASHBOARD =  WITH \
                                        class AS ( \
                                        SELECT si.id, sit.id sit_id, sit.name sit_name, sj.id sj_id, sj.name sj_name, s.individual, si.start_time, si.end_time FROM schedules s \
                                        JOIN schedule_items si ON si.schedule_id = s.id \
                                        JOIN schedule_item_types sit ON sit.id = si.type_id \
                                        LEFT JOIN subjects sj ON sj.id = si.subject_id \
                                        WHERE s.class_id = (SELECT class_id FROM user_student WHERE user_id = :userId) AND si.date = :date \
                                        ), \
                                        individual AS ( \
                                        SELECT si.id, sit.id sit_id, sit.name sit_name, sj.id sj_id, sj.name sj_name, s.individual, si.start_time, si.end_time FROM schedules s \
                                        JOIN schedule_items si ON si.schedule_id = s.id \
                                        JOIN schedule_item_types sit ON sit.id = si.type_id \
                                        LEFT JOIN subjects sj ON sj.id = si.subject_id \
                                        WHERE s.student_id = :userId AND si.date = :date \
                                        ) \
                                        SELECT * FROM individual \
                                        UNION \
                                        SELECT class.* FROM class WHERE class.start_time NOT IN (SELECT start_time FROM individual) \
                                        ORDER BY start_time
queries.GET_SCHEDULE_ITEMS_TEACHER_DASHBOARD = SELECT * FROM v_teacher_lessons_by_date t WHERE t.teacher_id = :userId AND t.date = :date ORDER BY start_time

queries.GET_AUTH_STUDENT_DIARY = WITH \
                            class AS ( \
                            SELECT si.`date`,sj.name subject_name,v.visited,s.individual,si.start_time,si.end_time,  \
                            (SELECT GROUP_CONCAT(`text` SEPARATOR '_____') FROM homeworks WHERE schedule_item_id = si.id) homework,  \
                            (SELECT GROUP_CONCAT(concat((SELECT name FROM grade_types WHERE id = grade_type_id), '_', `value`) SEPARATOR ';') FROM grades WHERE schedule_item_id = si.id AND student_id = u.id) as grades  \
                            FROM users u  \
                            JOIN user_student us ON us.user_id = u.id  \
                            JOIN schedules s ON s.class_id = us.class_id  \
                            JOIN schedule_items si ON si.schedule_id = s.id  \
                            JOIN subjects sj ON sj.id = si.subject_id  \
                            LEFT JOIN visits v ON v.schedule_item_id = si.id AND v.user_id = u.id  \
                            WHERE u.id = :userId AND si.date BETWEEN :fromDate AND :toDate AND si.type_id = 1), \
                            individual AS ( \
                            SELECT si.`date`,sj.name subject_name,v.visited,s.individual,si.start_time,si.end_time,  \
                            (SELECT GROUP_CONCAT(`text` SEPARATOR '_____') FROM homeworks WHERE schedule_item_id = si.id) homework,  \
                            (SELECT GROUP_CONCAT(concat((SELECT name FROM grade_types WHERE id = grade_type_id), '_', `value`) SEPARATOR ';') FROM grades WHERE schedule_item_id = si.id AND student_id = u.id) as grades  \
                            FROM users u  \
                            JOIN schedules s ON s.student_id = u.id  \
                            JOIN schedule_items si ON si.schedule_id = s.id  \
                            JOIN subjects sj ON sj.id = si.subject_id  \
                            LEFT JOIN visits v ON v.schedule_item_id = si.id AND v.user_id = u.id  \
                            WHERE u.id = :userId AND si.date BETWEEN :fromDate AND :toDate AND si.type_id = 1) \
                            SELECT * FROM individual  \
                            UNION \
                            SELECT class.* FROM class WHERE class.date NOT IN (SELECT `date` FROM individual)  \
                            OR (class.date IN (SELECT `date` FROM individual) AND class.start_time NOT IN (SELECT start_time FROM individual WHERE `date` = class.`date`))  \
                            ORDER BY date, start_time

queries.GET_DIARY_BY_SCHEDULE_ITEM_ID = SELECT * FROM v_diary_by_schedule_item_ids \
                            WHERE (c_id, subject_id) in (SELECT s.class_id, si.subject_id FROM schedule_items si JOIN schedules s ON s.id = si.schedule_id WHERE si.id in (:scheduleItemIds)) \
                            OR (u_id, subject_id) in (SELECT s.student_id, si.subject_id FROM schedule_items si JOIN schedules s ON s.id = si.schedule_id WHERE si.id in (:scheduleItemIds))
queries.GET_CLASS_CURRENT_SI_ID = SELECT si.id, s.class_id FROM schedule_items si \
                            JOIN schedules s ON s.id = si.schedule_id \
                            WHERE si.id IN (:scheduleItemIds)

queries.GET_DIARY_BY_CLASS_AND_SUBJECT_IDS = SELECT u.id u_id,si.id si_id, u.name u_name, u.surname u_surname, u.patronymic u_patronymic, si.`date`, s.individual, si.start_time, si.end_time, \
                                (SELECT GROUP_CONCAT(concat(grade_type_id, '_', `value`) SEPARATOR ';') FROM grades WHERE schedule_item_id = si.id AND student_id = u.id) as grades  \
                                FROM schedules s \
                                JOIN schedule_items si ON si.schedule_id = s.id \
                                JOIN user_student us ON us.class_id = s.class_id \
                                JOIN users u ON u.id = us.user_id \
                                WHERE s.class_id = :classId AND si.subject_id = :subjectId AND teacher_id = :teacherId  \
                                AND si.type_id = 1 AND si.date <= CURRENT_TIMESTAMP \
                                ORDER BY u.surname, u.name, si.date, si.id
queries.GET_HOMEWORK_NEXT_DATES = SELECT si.id, si.date, si.start_time, si.end_time FROM schedule_items si \
                                WHERE (si.schedule_id, si.subject_id) = (SELECT si1.schedule_id, si1.subject_id FROM schedule_items si1 WHERE si1.id = :scheduleItemId) \
                                AND si.type_id = 1 \
                                AND ((si.date BETWEEN DATE_ADD(curdate(), INTERVAL 1 DAY) AND DATE_ADD(curdate(), INTERVAL 1 WEEK)) OR (si.date = CURDATE() AND si.start_time > CURTIME())) \
                                ORDER BY si.date, si.start_time

queries.GET_CHAT_USERS_INFO = SELECT u.id, u.username, u.name, u.surname, u.patronymic, r.code AS role_code FROM users u \
                                    JOIN roles r ON r.id = u.role_id \
                                    WHERE u.id in (:chatUserIds)

queries.INSERT_CLASS = INSERT INTO classes(number,letter) VALUES (?,?)
queries.INSERT_NEWS = INSERT INTO news(uuid,url,title,text,type_id) VALUES (?,?,?,?,?)
queries.INSERT_NEWS_IMAGE = INSERT INTO news_images(news_id,name,is_main) VALUES (?,?,?)
queries.INSERT_GRADE_TYPE = INSERT INTO grade_types(name,weight) VALUES (?,?)
queries.INSERT_SUBJECT = INSERT INTO subjects(name,teacher_required) VALUES (?,?)
queries.INSERT_REVIEW = INSERT INTO reviews(name,role,rating,text,image) VALUES (:name,:role,:rating,:text,:image)
queries.INSERT_USER = INSERT INTO users(username,name,surname,patronymic,password,role_id,birth_date) VALUES (?,?,?,?,?,(SELECT id FROM roles WHERE code = ?),?)
queries.INSERT_USER_STUDENT = INSERT INTO user_student(user_id,class_id) VALUES (:user_id,:class_id)
queries.INSERT_USER_TEACHER_CLASSES = INSERT INTO user_teacher_classes(user_id,class_id) VALUES (?,?)
queries.INSERT_USER_TEACHER_SUBJECTS = INSERT INTO user_teacher_subjects(user_id,subject_id) VALUES (?,?)
queries.INSERT_USER_TEACHER_SUBJECTS_CLASSES = INSERT INTO user_teacher_subject_and_class(user_id,subject_id,class_id) VALUES (?,?,?)

queries.INSERT_NEWS_INNER = INSERT INTO news_inner(class_id,name,description,date) VALUES (?,?,?,?)
queries.INSERT_EVENTS = INSERT INTO events(class_id,name,description,date) VALUES (?,?,?,?)

queries.INSERT_SCHEDULE = INSERT INTO schedules(class_id,trimester_id,start_date,end_date) VALUES (?,?,?,?)
queries.INSERT_SCHEDULE_INDIVIDUAL = INSERT INTO schedules(student_id,trimester_id,individual,status_id,start_date,end_date) VALUES (?,?,1,3,?,?)
queries.INSERT_SCHEDULE_ITEM_INDIVIDUAL = INSERT INTO schedule_items (schedule_id, type_id, subject_id, teacher_id, `date`, start_time, end_time) VALUES (?,1,?,?,?,?,?)
queries.INSERT_HOMEWORK = INSERT INTO homeworks(schedule_item_id,text,teacher_id) VALUES (?,?,(SELECT id FROM users WHERE username = ?))

queries.INSERT_STUDENT_VISIT = INSERT INTO visits(schedule_item_id,user_id,visited) VALUES (:scheduleItemId,:studentId,:visited)

queries.UPDATE_CLASS = UPDATE classes SET number = :number, letter = :letter WHERE id = :id
queries.UPDATE_SCHEDULE_ITEM = UPDATE schedule_items SET subject_id = :subject_id, teacher_id = :teacher_id WHERE id = :id
queries.UPDATE_USER = UPDATE users SET username = :username, name = :name, surname = :surname, patronymic = :patronymic, password = :password, \
                       birth_date = :birth_date WHERE id = :id
queries.UPDATE_USER_NO_PASS = UPDATE users SET username = :username, name = :name, surname = :surname, patronymic = :patronymic, birth_date = :birth_date WHERE id = :id
queries.UPDATE_USER_PASSWORD = UPDATE users SET password = :password WHERE username = :username
queries.UPDATE_STUDENT_CLASS = UPDATE user_student SET class_id = :classId WHERE user_id = :userId
queries.UPDATE_NEWS = UPDATE news SET title = :title, text = :text, type_id = :type_id WHERE id = :id
queries.UPDATE_NEWS_IMAGE = UPDATE news_images SET is_main = :isMain WHERE name = :fileName
queries.UPDATE_REVIEW = UPDATE reviews SET name = :name, role = :role, rating = :rating, text = :text, image = :image WHERE id = :id
queries.UPDATE_GRADE_TYPE = UPDATE grade_types SET name = :name, weight = :weight WHERE id = :id
queries.UPDATE_SUBJECT = UPDATE subjects SET name = :name WHERE id = :id
queries.UPDATE_SCHEDULE_DAY = UPDATE schedule_items SET type_id = ?, subject_id = ?, teacher_id = ?, start_time = ?, end_time = ? WHERE id = ?
queries.UPDATE_SCHEDULE_STATUS = UPDATE schedules SET status_id = (SELECT id FROM schedule_statuses WHERE code = :status) WHERE id = :scheduleId

queries.UPDATE_INNER_NEWS = UPDATE news_inner SET class_id = :classId, name = :name, description = :description, date = :date WHERE id = :id
queries.UPDATE_EVENT = UPDATE events SET class_id = :classId, name = :name, description = :description, date = :date WHERE id = :id

queries.UPDATE_STUDENT_VISIT = UPDATE visits SET visited = :visited WHERE schedule_item_id = :scheduleItemId AND user_id = :studentId

queries.DELETE_CLASS = DELETE FROM classes WHERE id = :id
queries.DELETE_SCHEDULE_ITEM = DELETE FROM schedule_items WHERE id = :id
queries.DELETE_NEWS = DELETE FROM news WHERE id = :id
queries.DELETE_GRADE_TYPE = DELETE FROM grade_types WHERE id = :id
queries.DELETE_SUBJECT = DELETE FROM subjects WHERE id = :id
queries.DELETE_REVIEW = DELETE FROM reviews WHERE id = :id
queries.DELETE_OLD_NEWS_IMAGES = DELETE FROM news_images WHERE news_id = :newsId and name not in (:fileNames)
queries.DELETE_USER = DELETE FROM users WHERE id = :id
queries.DELETE_TEACHER_CLASSES = DELETE FROM user_teacher_classes WHERE user_id = :userId
queries.DELETE_TEACHER_SUBJECTS = DELETE FROM user_teacher_subjects WHERE user_id = :userId
queries.DELETE_TEACHER_SUBJECT_CLASSES = DELETE FROM user_teacher_subject_and_class WHERE user_id = :userId

queries.DELETE_INNER_NEWS = DELETE FROM news_inner WHERE id = :id
queries.DELETE_EVENT = DELETE FROM events WHERE id = :id


queries.CHANGE_USER_LOCK = UPDATE users SET locked = :locked WHERE id = :id

queries.DROP_TEMP_SCHEDULE_ITEM = DROP TEMPORARY TABLE IF EXISTS scheduleItemTemp;
queries.CREATE_TEMP_SCHEDULE_ITEM = CREATE TEMPORARY TABLE scheduleItemTemp(dayNumber INT,typeId INT,subjectId INT,userId INT,startTime TIME,endTime TIME);
queries.INSERT_TEMP_SCHEDULE_ITEM = INSERT INTO schedule_item_temp(schedule_id,day_number,type_id,subject_id,user_id,start_time,end_time) VALUES (?,?,?,?,?,?,?)

procedures.FILL_SCHEDULE_FROM_TEMP = call fill_schedule_from_temp(?)
procedures.NEW_GRADE = new_grade